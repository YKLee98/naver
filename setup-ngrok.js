#!/usr/bin/env node

/**
 * ngrok ÏÑ§Ï†ï ÏûêÎèôÌôî Ïä§ÌÅ¨Î¶ΩÌä∏
 * - ÌîÑÎ°†Ìä∏ÏóîÎìú ngrok URLÏùÑ .env ÌååÏùºÏóê ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
 * - Î∞±ÏóîÎìú API Ìò∏Ï∂úÏùÑ ÌîÑÎ°ùÏãúÎ°ú Ï≤òÎ¶¨
 */

const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// ÏÉâÏÉÅ ÏΩîÎìú
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function updateEnvFile(ngrokUrl) {
  const rootEnvPath = path.join(__dirname, '.env');
  const frontendEnvPath = path.join(__dirname, 'packages', 'frontend', '.env');
  
  try {
    // 1. Î£®Ìä∏ .env ÏóÖÎç∞Ïù¥Ìä∏
    let rootEnv = '';
    if (fs.existsSync(rootEnvPath)) {
      rootEnv = fs.readFileSync(rootEnvPath, 'utf8');
    }
    
    // ngrok_url ÏóÖÎç∞Ïù¥Ìä∏ ÎòêÎäî Ï∂îÍ∞Ä
    if (rootEnv.includes('ngrok_url=')) {
      rootEnv = rootEnv.replace(/ngrok_url=.*/g, `ngrok_url=${ngrokUrl}`);
    } else {
      rootEnv += `\nngrok_url=${ngrokUrl}\n`;
    }
    
    fs.writeFileSync(rootEnvPath, rootEnv);
    log(`‚úÖ Updated root .env with ngrok URL: ${ngrokUrl}`, 'green');
    
    // 2. ÌîÑÎ°†Ìä∏ÏóîÎìú .env ÏóÖÎç∞Ïù¥Ìä∏ (Î∞±ÏóîÎìúÎ•º localhostÎ°ú Ïú†ÏßÄ)
    const frontendEnv = `# Local development settings
# ngrokÏùÑ ÌÜµÌï¥ Ï†ëÏÜç Ïãú Î∞±ÏóîÎìúÎäî ÌîÑÎ°ùÏãúÎ°ú Ï≤òÎ¶¨Îê®
VITE_API_URL=/api/v1
VITE_NGROK_URL=${ngrokUrl}
`;
    
    fs.writeFileSync(frontendEnvPath, frontendEnv);
    log(`‚úÖ Updated frontend .env`, 'green');
    
  } catch (error) {
    log(`‚ùå Error updating env files: ${error.message}`, 'red');
    return false;
  }
  
  return true;
}

function updateViteConfig() {
  const viteConfigPath = path.join(__dirname, 'packages', 'frontend', 'vite.config.ts');
  
  try {
    let viteConfig = fs.readFileSync(viteConfigPath, 'utf8');
    
    // proxy ÏÑ§Ï†ïÏù¥ Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏
    if (!viteConfig.includes("'/api/v1': {")) {
      log('‚ö†Ô∏è  Vite proxy configuration might need adjustment', 'yellow');
    }
    
    log('‚úÖ Vite config checked', 'green');
    return true;
  } catch (error) {
    log(`‚ùå Error checking Vite config: ${error.message}`, 'red');
    return false;
  }
}

async function getNgrokUrl() {
  return new Promise((resolve) => {
    rl.question(`${colors.cyan}Enter your ngrok URL (e.g., https://abc123.ngrok-free.app): ${colors.reset}`, (url) => {
      // URL Ï†ïÎ¶¨
      url = url.trim();
      if (!url.startsWith('http')) {
        url = 'https://' + url;
      }
      // Ìä∏Î†àÏùºÎßÅ Ïä¨ÎûòÏãú Ï†úÍ±∞
      url = url.replace(/\/$/, '');
      resolve(url);
    });
  });
}

async function main() {
  log('\nüöÄ ngrok Setup Script\n', 'bright');
  log('This script will configure your app to work with ngrok tunneling.\n', 'blue');
  
  // 1. ngrok URL ÏûÖÎ†•Î∞õÍ∏∞
  const ngrokUrl = await getNgrokUrl();
  
  if (!ngrokUrl || !ngrokUrl.includes('ngrok')) {
    log('‚ùå Invalid ngrok URL', 'red');
    rl.close();
    process.exit(1);
  }
  
  log(`\nüìù Configuring for: ${ngrokUrl}\n`, 'yellow');
  
  // 2. ÌôòÍ≤Ω ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏
  if (!updateEnvFile(ngrokUrl)) {
    rl.close();
    process.exit(1);
  }
  
  // 3. Vite ÏÑ§Ï†ï ÌôïÏù∏
  updateViteConfig();
  
  // 4. ÏÇ¨Ïö© ÏïàÎÇ¥
  log('\n' + '='.repeat(60), 'cyan');
  log('‚ú® Setup Complete!', 'green');
  log('='.repeat(60) + '\n', 'cyan');
  
  log('üìã Next Steps:', 'yellow');
  log('1. Start ngrok with your frontend port:', 'blue');
  log(`   ${colors.bright}ngrok http 5173${colors.reset}`);
  log('');
  log('2. Start the servers:', 'blue');
  log(`   ${colors.bright}pnpm dev${colors.reset} (in root directory)`);
  log('');
  log('3. Access your app:', 'blue');
  log(`   ${colors.bright}${ngrokUrl}${colors.reset}`);
  log('');
  log('üì± Mobile Access:', 'yellow');
  log(`   Open ${ngrokUrl} on your mobile device`);
  log('');
  log('‚ö†Ô∏è  Important:', 'yellow');
  log('   - The backend API calls will be proxied through Vite');
  log('   - Make sure both frontend and backend servers are running');
  log('   - If you get a new ngrok URL, run this script again');
  log('');
  
  rl.close();
}

// ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ï≤òÎ¶¨
process.on('SIGINT', () => {
  log('\n\nüëã Bye!', 'cyan');
  rl.close();
  process.exit(0);
});

// Ïã§Ìñâ
main().catch((error) => {
  log(`\n‚ùå Error: ${error.message}`, 'red');
  rl.close();
  process.exit(1);
});